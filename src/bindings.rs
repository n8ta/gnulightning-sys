/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 120300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_CURRENT: u32 = 5;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __BYTE_ORDER: u32 = 1234;
pub const JIT_HASH_CONSTS: u32 = 1;
pub const JIT_NUM_OPERANDS: u32 = 2;
pub const __X64: u32 = 1;
pub const jit_flag_node: u32 = 1;
pub const jit_flag_patch: u32 = 2;
pub const jit_flag_data: u32 = 4;
pub const jit_flag_use: u32 = 8;
pub const jit_flag_synth: u32 = 16;
pub const jit_flag_head: u32 = 4096;
pub const jit_flag_varargs: u32 = 8192;
pub const JIT_DISABLE_DATA: u32 = 1;
pub const JIT_DISABLE_NOTE: u32 = 2;
pub const jit_class_chk: u32 = 33554432;
pub const jit_class_arg: u32 = 134217728;
pub const jit_class_sav: u32 = 268435456;
pub const jit_class_gpr: u32 = 536870912;
pub const jit_class_fpr: u32 = 1073741824;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    fn test_field___mbstate8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__mbstate8)
            )
        );
    }
    test_field___mbstate8();
    fn test_field__mbstateL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(_mbstateL)
            )
        );
    }
    test_field__mbstateL();
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    fn test_field___routine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__routine)
            )
        );
    }
    test_field___routine();
    fn test_field___arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__arg)
            )
        );
    }
    test_field___arg();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___cleanup_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__cleanup_stack)
            )
        );
    }
    test_field___cleanup_stack();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    fn test_field_ad_name_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<accessx_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ad_name_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(accessx_descriptor),
                "::",
                stringify!(ad_name_offset)
            )
        );
    }
    test_field_ad_name_offset();
    fn test_field_ad_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<accessx_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ad_flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(accessx_descriptor),
                "::",
                stringify!(ad_flags)
            )
        );
    }
    test_field_ad_flags();
    fn test_field_ad_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<accessx_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ad_pad) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(accessx_descriptor),
                "::",
                stringify!(ad_pad)
            )
        );
    }
    test_field_ad_pad();
}
pub type size_t = __darwin_size_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type off_t = __darwin_off_t;
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ssize_t,
    );
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    fn test_field___eax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eax)
            )
        );
    }
    test_field___eax();
    fn test_field___ebx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebx)
            )
        );
    }
    test_field___ebx();
    fn test_field___ecx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ecx)
            )
        );
    }
    test_field___ecx();
    fn test_field___edx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edx)
            )
        );
    }
    test_field___edx();
    fn test_field___edi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edi)
            )
        );
    }
    test_field___edi();
    fn test_field___esi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esi)
            )
        );
    }
    test_field___esi();
    fn test_field___ebp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebp)
            )
        );
    }
    test_field___ebp();
    fn test_field___esp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esp)
            )
        );
    }
    test_field___esp();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___eflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eflags)
            )
        );
    }
    test_field___eflags();
    fn test_field___eip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eip)
            )
        );
    }
    test_field___eip();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    fn test_field___mmst_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_reg)
            )
        );
    }
    test_field___mmst_reg();
    fn test_field___mmst_rsrv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_rsrv)
            )
        );
    }
    test_field___mmst_rsrv();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    fn test_field___xmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_xmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_xmm_reg),
                "::",
                stringify!(__xmm_reg)
            )
        );
    }
    test_field___xmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    fn test_field___ymm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ymm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ymm_reg),
                "::",
                stringify!(__ymm_reg)
            )
        );
    }
    test_field___ymm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    fn test_field___zmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_zmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_zmm_reg),
                "::",
                stringify!(__zmm_reg)
            )
        );
    }
    test_field___zmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    fn test_field___opmask_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_opmask_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_opmask_reg),
                "::",
                stringify!(__opmask_reg)
            )
        );
    }
    test_field___opmask_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            724usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            756usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            772usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    fn test_field___insn_stream_valid_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_stream_valid_bytes)
            )
        );
    }
    test_field___insn_stream_valid_bytes();
    fn test_field___insn_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_offset)
            )
        );
    }
    test_field___insn_offset();
    fn test_field___out_of_synch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__out_of_synch)
            )
        );
    }
    test_field___out_of_synch();
    fn test_field___insn_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_bytes)
            )
        );
    }
    test_field___insn_bytes();
    fn test_field___insn_cacheline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_cacheline)
            )
        );
    }
    test_field___insn_cacheline();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    fn test_field___from_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__from_ip)
            )
        );
    }
    test_field___from_ip();
    fn test_field___to_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__to_ip)
            )
        );
    }
    test_field___to_ip();
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    fn test_field___lbr_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbr_count)
            )
        );
    }
    test_field___lbr_count();
    fn test_field___lbrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbrs)
            )
        );
    }
    test_field___lbrs();
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    fn test_field___pagein_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_pagein_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_pagein_state),
                "::",
                stringify!(__pagein_error)
            )
        );
    }
    test_field___pagein_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    fn test_field___rax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rax)
            )
        );
    }
    test_field___rax();
    fn test_field___rbx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbx)
            )
        );
    }
    test_field___rbx();
    fn test_field___rcx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rcx)
            )
        );
    }
    test_field___rcx();
    fn test_field___rdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdx)
            )
        );
    }
    test_field___rdx();
    fn test_field___rdi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdi)
            )
        );
    }
    test_field___rdi();
    fn test_field___rsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsi)
            )
        );
    }
    test_field___rsi();
    fn test_field___rbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbp)
            )
        );
    }
    test_field___rbp();
    fn test_field___rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsp)
            )
        );
    }
    test_field___rsp();
    fn test_field___r8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r8)
            )
        );
    }
    test_field___r8();
    fn test_field___r9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r9)
            )
        );
    }
    test_field___r9();
    fn test_field___r10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r10)
            )
        );
    }
    test_field___r10();
    fn test_field___r11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r11)
            )
        );
    }
    test_field___r11();
    fn test_field___r12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r12)
            )
        );
    }
    test_field___r12();
    fn test_field___r13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r13)
            )
        );
    }
    test_field___r13();
    fn test_field___r14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r14)
            )
        );
    }
    test_field___r14();
    fn test_field___r15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r15)
            )
        );
    }
    test_field___r15();
    fn test_field___rip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rip)
            )
        );
    }
    test_field___rip();
    fn test_field___rflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rflags)
            )
        );
    }
    test_field___rflags();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    fn test_field___ss64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss64)
            )
        );
    }
    test_field___ss64();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___gsbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__gsbase)
            )
        );
    }
    test_field___gsbase();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            852usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            860usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            884usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            892usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            900usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            1036usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            1068usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            1100usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1132usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
    fn test_field___fpu_zmmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize
            },
            1164usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh8)
            )
        );
    }
    test_field___fpu_zmmh8();
    fn test_field___fpu_zmmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize
            },
            1196usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh9)
            )
        );
    }
    test_field___fpu_zmmh9();
    fn test_field___fpu_zmmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize
            },
            1228usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh10)
            )
        );
    }
    test_field___fpu_zmmh10();
    fn test_field___fpu_zmmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize
            },
            1260usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh11)
            )
        );
    }
    test_field___fpu_zmmh11();
    fn test_field___fpu_zmmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize
            },
            1292usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh12)
            )
        );
    }
    test_field___fpu_zmmh12();
    fn test_field___fpu_zmmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize
            },
            1324usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh13)
            )
        );
    }
    test_field___fpu_zmmh13();
    fn test_field___fpu_zmmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize
            },
            1356usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh14)
            )
        );
    }
    test_field___fpu_zmmh14();
    fn test_field___fpu_zmmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize
            },
            1388usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh15)
            )
        );
    }
    test_field___fpu_zmmh15();
    fn test_field___fpu_zmm16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize
            },
            1420usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm16)
            )
        );
    }
    test_field___fpu_zmm16();
    fn test_field___fpu_zmm17() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize
            },
            1484usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm17)
            )
        );
    }
    test_field___fpu_zmm17();
    fn test_field___fpu_zmm18() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize
            },
            1548usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm18)
            )
        );
    }
    test_field___fpu_zmm18();
    fn test_field___fpu_zmm19() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize
            },
            1612usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm19)
            )
        );
    }
    test_field___fpu_zmm19();
    fn test_field___fpu_zmm20() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize
            },
            1676usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm20)
            )
        );
    }
    test_field___fpu_zmm20();
    fn test_field___fpu_zmm21() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize
            },
            1740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm21)
            )
        );
    }
    test_field___fpu_zmm21();
    fn test_field___fpu_zmm22() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize
            },
            1804usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm22)
            )
        );
    }
    test_field___fpu_zmm22();
    fn test_field___fpu_zmm23() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize
            },
            1868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm23)
            )
        );
    }
    test_field___fpu_zmm23();
    fn test_field___fpu_zmm24() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize
            },
            1932usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm24)
            )
        );
    }
    test_field___fpu_zmm24();
    fn test_field___fpu_zmm25() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize
            },
            1996usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm25)
            )
        );
    }
    test_field___fpu_zmm25();
    fn test_field___fpu_zmm26() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize
            },
            2060usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm26)
            )
        );
    }
    test_field___fpu_zmm26();
    fn test_field___fpu_zmm27() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize
            },
            2124usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm27)
            )
        );
    }
    test_field___fpu_zmm27();
    fn test_field___fpu_zmm28() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize
            },
            2188usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm28)
            )
        );
    }
    test_field___fpu_zmm28();
    fn test_field___fpu_zmm29() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize
            },
            2252usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm29)
            )
        );
    }
    test_field___fpu_zmm29();
    fn test_field___fpu_zmm30() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize
            },
            2316usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm30)
            )
        );
    }
    test_field___fpu_zmm30();
    fn test_field___fpu_zmm31() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize
            },
            2380usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm31)
            )
        );
    }
    test_field___fpu_zmm31();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    fn test_field___ctrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_cpmu_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_cpmu_state64),
                "::",
                stringify!(__ctrs)
            )
        );
    }
    test_field___ctrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_size)
            )
        );
    }
    test_field_ss_size();
    fn test_field_ss_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_flags)
            )
        );
    }
    test_field_ss_flags();
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    fn test_field_uc_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_onstack)
            )
        );
    }
    test_field_uc_onstack();
    fn test_field_uc_sigmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_sigmask)
            )
        );
    }
    test_field_uc_sigmask();
    fn test_field_uc_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_stack)
            )
        );
    }
    test_field_uc_stack();
    fn test_field_uc_link() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_link)
            )
        );
    }
    test_field_uc_link();
    fn test_field_uc_mcsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcsize)
            )
        );
    }
    test_field_uc_mcsize();
    fn test_field_uc_mcontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcontext)
            )
        );
    }
    test_field_uc_mcontext();
}
pub type ucontext_t = __darwin_ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    fn test_field_sival_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_int)
            )
        );
    }
    test_field_sival_int();
    fn test_field_sival_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_ptr)
            )
        );
    }
    test_field_sival_ptr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    fn test_field_sigev_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify)
            )
        );
    }
    test_field_sigev_notify();
    fn test_field_sigev_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_signo)
            )
        );
    }
    test_field_sigev_signo();
    fn test_field_sigev_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_value)
            )
        );
    }
    test_field_sigev_value();
    fn test_field_sigev_notify_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_function)
            )
        );
    }
    test_field_sigev_notify_function();
    fn test_field_sigev_notify_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_attributes)
            )
        );
    }
    test_field_sigev_notify_attributes();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    fn test_field_si_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_signo)
            )
        );
    }
    test_field_si_signo();
    fn test_field_si_errno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_errno)
            )
        );
    }
    test_field_si_errno();
    fn test_field_si_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_code)
            )
        );
    }
    test_field_si_code();
    fn test_field_si_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_pid)
            )
        );
    }
    test_field_si_pid();
    fn test_field_si_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_uid)
            )
        );
    }
    test_field_si_uid();
    fn test_field_si_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_status)
            )
        );
    }
    test_field_si_status();
    fn test_field_si_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_addr)
            )
        );
    }
    test_field_si_addr();
    fn test_field_si_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_value)
            )
        );
    }
    test_field_si_value();
    fn test_field_si_band() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_band)
            )
        );
    }
    test_field_si_band();
    fn test_field___pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(__pad)
            )
        );
    }
    test_field___pad();
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    fn test_field___sa_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_handler)
            )
        );
    }
    test_field___sa_handler();
    fn test_field___sa_sigaction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_sigaction)
            )
        );
    }
    test_field___sa_sigaction();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_tramp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_tramp)
            )
        );
    }
    test_field_sa_tramp();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    fn test_field_sv_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_handler)
            )
        );
    }
    test_field_sv_handler();
    fn test_field_sv_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_mask)
            )
        );
    }
    test_field_sv_mask();
    fn test_field_sv_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_flags)
            )
        );
    }
    test_field_sv_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_onstack)
            )
        );
    }
    test_field_ss_onstack();
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    fn test_field_ru_utime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_utime)
            )
        );
    }
    test_field_ru_utime();
    fn test_field_ru_stime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_stime)
            )
        );
    }
    test_field_ru_stime();
    fn test_field_ru_maxrss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_maxrss)
            )
        );
    }
    test_field_ru_maxrss();
    fn test_field_ru_ixrss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_ixrss)
            )
        );
    }
    test_field_ru_ixrss();
    fn test_field_ru_idrss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_idrss)
            )
        );
    }
    test_field_ru_idrss();
    fn test_field_ru_isrss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_isrss)
            )
        );
    }
    test_field_ru_isrss();
    fn test_field_ru_minflt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_minflt)
            )
        );
    }
    test_field_ru_minflt();
    fn test_field_ru_majflt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_majflt)
            )
        );
    }
    test_field_ru_majflt();
    fn test_field_ru_nswap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_nswap)
            )
        );
    }
    test_field_ru_nswap();
    fn test_field_ru_inblock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_inblock)
            )
        );
    }
    test_field_ru_inblock();
    fn test_field_ru_oublock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_oublock)
            )
        );
    }
    test_field_ru_oublock();
    fn test_field_ru_msgsnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_msgsnd)
            )
        );
    }
    test_field_ru_msgsnd();
    fn test_field_ru_msgrcv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_msgrcv)
            )
        );
    }
    test_field_ru_msgrcv();
    fn test_field_ru_nsignals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_nsignals)
            )
        );
    }
    test_field_ru_nsignals();
    fn test_field_ru_nvcsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_nvcsw)
            )
        );
    }
    test_field_ru_nvcsw();
    fn test_field_ru_nivcsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage),
                "::",
                stringify!(ru_nivcsw)
            )
        );
    }
    test_field_ru_nivcsw();
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v0>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v0),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
    fn test_field_ri_child_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_user_time)
            )
        );
    }
    test_field_ri_child_user_time();
    fn test_field_ri_child_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_system_time)
            )
        );
    }
    test_field_ri_child_system_time();
    fn test_field_ri_child_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_child_pkg_idle_wkups();
    fn test_field_ri_child_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_interrupt_wkups)
            )
        );
    }
    test_field_ri_child_interrupt_wkups();
    fn test_field_ri_child_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_pageins)
            )
        );
    }
    test_field_ri_child_pageins();
    fn test_field_ri_child_elapsed_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v1),
                "::",
                stringify!(ri_child_elapsed_abstime)
            )
        );
    }
    test_field_ri_child_elapsed_abstime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
    fn test_field_ri_child_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_user_time)
            )
        );
    }
    test_field_ri_child_user_time();
    fn test_field_ri_child_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_system_time)
            )
        );
    }
    test_field_ri_child_system_time();
    fn test_field_ri_child_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_child_pkg_idle_wkups();
    fn test_field_ri_child_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_interrupt_wkups)
            )
        );
    }
    test_field_ri_child_interrupt_wkups();
    fn test_field_ri_child_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_pageins)
            )
        );
    }
    test_field_ri_child_pageins();
    fn test_field_ri_child_elapsed_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_child_elapsed_abstime)
            )
        );
    }
    test_field_ri_child_elapsed_abstime();
    fn test_field_ri_diskio_bytesread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_diskio_bytesread)
            )
        );
    }
    test_field_ri_diskio_bytesread();
    fn test_field_ri_diskio_byteswritten() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v2),
                "::",
                stringify!(ri_diskio_byteswritten)
            )
        );
    }
    test_field_ri_diskio_byteswritten();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
    fn test_field_ri_child_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_user_time)
            )
        );
    }
    test_field_ri_child_user_time();
    fn test_field_ri_child_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_system_time)
            )
        );
    }
    test_field_ri_child_system_time();
    fn test_field_ri_child_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_child_pkg_idle_wkups();
    fn test_field_ri_child_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_interrupt_wkups)
            )
        );
    }
    test_field_ri_child_interrupt_wkups();
    fn test_field_ri_child_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_pageins)
            )
        );
    }
    test_field_ri_child_pageins();
    fn test_field_ri_child_elapsed_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_child_elapsed_abstime)
            )
        );
    }
    test_field_ri_child_elapsed_abstime();
    fn test_field_ri_diskio_bytesread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_diskio_bytesread)
            )
        );
    }
    test_field_ri_diskio_bytesread();
    fn test_field_ri_diskio_byteswritten() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_diskio_byteswritten)
            )
        );
    }
    test_field_ri_diskio_byteswritten();
    fn test_field_ri_cpu_time_qos_default() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_default)
            )
        );
    }
    test_field_ri_cpu_time_qos_default();
    fn test_field_ri_cpu_time_qos_maintenance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_maintenance)
            )
        );
    }
    test_field_ri_cpu_time_qos_maintenance();
    fn test_field_ri_cpu_time_qos_background() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_background)
            )
        );
    }
    test_field_ri_cpu_time_qos_background();
    fn test_field_ri_cpu_time_qos_utility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_utility)
            )
        );
    }
    test_field_ri_cpu_time_qos_utility();
    fn test_field_ri_cpu_time_qos_legacy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_legacy)
            )
        );
    }
    test_field_ri_cpu_time_qos_legacy();
    fn test_field_ri_cpu_time_qos_user_initiated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_user_initiated)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_initiated();
    fn test_field_ri_cpu_time_qos_user_interactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_cpu_time_qos_user_interactive)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_interactive();
    fn test_field_ri_billed_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_billed_system_time)
            )
        );
    }
    test_field_ri_billed_system_time();
    fn test_field_ri_serviced_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v3),
                "::",
                stringify!(ri_serviced_system_time)
            )
        );
    }
    test_field_ri_serviced_system_time();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
    fn test_field_ri_child_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_user_time)
            )
        );
    }
    test_field_ri_child_user_time();
    fn test_field_ri_child_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_system_time)
            )
        );
    }
    test_field_ri_child_system_time();
    fn test_field_ri_child_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_child_pkg_idle_wkups();
    fn test_field_ri_child_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_interrupt_wkups)
            )
        );
    }
    test_field_ri_child_interrupt_wkups();
    fn test_field_ri_child_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_pageins)
            )
        );
    }
    test_field_ri_child_pageins();
    fn test_field_ri_child_elapsed_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_child_elapsed_abstime)
            )
        );
    }
    test_field_ri_child_elapsed_abstime();
    fn test_field_ri_diskio_bytesread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_diskio_bytesread)
            )
        );
    }
    test_field_ri_diskio_bytesread();
    fn test_field_ri_diskio_byteswritten() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_diskio_byteswritten)
            )
        );
    }
    test_field_ri_diskio_byteswritten();
    fn test_field_ri_cpu_time_qos_default() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_default)
            )
        );
    }
    test_field_ri_cpu_time_qos_default();
    fn test_field_ri_cpu_time_qos_maintenance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_maintenance)
            )
        );
    }
    test_field_ri_cpu_time_qos_maintenance();
    fn test_field_ri_cpu_time_qos_background() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_background)
            )
        );
    }
    test_field_ri_cpu_time_qos_background();
    fn test_field_ri_cpu_time_qos_utility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_utility)
            )
        );
    }
    test_field_ri_cpu_time_qos_utility();
    fn test_field_ri_cpu_time_qos_legacy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_legacy)
            )
        );
    }
    test_field_ri_cpu_time_qos_legacy();
    fn test_field_ri_cpu_time_qos_user_initiated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_user_initiated)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_initiated();
    fn test_field_ri_cpu_time_qos_user_interactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cpu_time_qos_user_interactive)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_interactive();
    fn test_field_ri_billed_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_billed_system_time)
            )
        );
    }
    test_field_ri_billed_system_time();
    fn test_field_ri_serviced_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_serviced_system_time)
            )
        );
    }
    test_field_ri_serviced_system_time();
    fn test_field_ri_logical_writes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_logical_writes)
            )
        );
    }
    test_field_ri_logical_writes();
    fn test_field_ri_lifetime_max_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_lifetime_max_phys_footprint)
            )
        );
    }
    test_field_ri_lifetime_max_phys_footprint();
    fn test_field_ri_instructions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_instructions)
            )
        );
    }
    test_field_ri_instructions();
    fn test_field_ri_cycles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_cycles)
            )
        );
    }
    test_field_ri_cycles();
    fn test_field_ri_billed_energy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_billed_energy)
            )
        );
    }
    test_field_ri_billed_energy();
    fn test_field_ri_serviced_energy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_serviced_energy)
            )
        );
    }
    test_field_ri_serviced_energy();
    fn test_field_ri_interval_max_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_interval_max_phys_footprint)
            )
        );
    }
    test_field_ri_interval_max_phys_footprint();
    fn test_field_ri_runnable_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v4),
                "::",
                stringify!(ri_runnable_time)
            )
        );
    }
    test_field_ri_runnable_time();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    fn test_field_ri_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_uuid)
            )
        );
    }
    test_field_ri_uuid();
    fn test_field_ri_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_user_time)
            )
        );
    }
    test_field_ri_user_time();
    fn test_field_ri_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_system_time)
            )
        );
    }
    test_field_ri_system_time();
    fn test_field_ri_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_pkg_idle_wkups();
    fn test_field_ri_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_interrupt_wkups)
            )
        );
    }
    test_field_ri_interrupt_wkups();
    fn test_field_ri_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_pageins)
            )
        );
    }
    test_field_ri_pageins();
    fn test_field_ri_wired_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_wired_size)
            )
        );
    }
    test_field_ri_wired_size();
    fn test_field_ri_resident_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_resident_size)
            )
        );
    }
    test_field_ri_resident_size();
    fn test_field_ri_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_phys_footprint)
            )
        );
    }
    test_field_ri_phys_footprint();
    fn test_field_ri_proc_start_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_proc_start_abstime)
            )
        );
    }
    test_field_ri_proc_start_abstime();
    fn test_field_ri_proc_exit_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_proc_exit_abstime)
            )
        );
    }
    test_field_ri_proc_exit_abstime();
    fn test_field_ri_child_user_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_user_time)
            )
        );
    }
    test_field_ri_child_user_time();
    fn test_field_ri_child_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_system_time)
            )
        );
    }
    test_field_ri_child_system_time();
    fn test_field_ri_child_pkg_idle_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_pkg_idle_wkups)
            )
        );
    }
    test_field_ri_child_pkg_idle_wkups();
    fn test_field_ri_child_interrupt_wkups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_interrupt_wkups)
            )
        );
    }
    test_field_ri_child_interrupt_wkups();
    fn test_field_ri_child_pageins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_pageins)
            )
        );
    }
    test_field_ri_child_pageins();
    fn test_field_ri_child_elapsed_abstime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_child_elapsed_abstime)
            )
        );
    }
    test_field_ri_child_elapsed_abstime();
    fn test_field_ri_diskio_bytesread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_diskio_bytesread)
            )
        );
    }
    test_field_ri_diskio_bytesread();
    fn test_field_ri_diskio_byteswritten() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_diskio_byteswritten)
            )
        );
    }
    test_field_ri_diskio_byteswritten();
    fn test_field_ri_cpu_time_qos_default() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_default)
            )
        );
    }
    test_field_ri_cpu_time_qos_default();
    fn test_field_ri_cpu_time_qos_maintenance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_maintenance)
            )
        );
    }
    test_field_ri_cpu_time_qos_maintenance();
    fn test_field_ri_cpu_time_qos_background() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_background)
            )
        );
    }
    test_field_ri_cpu_time_qos_background();
    fn test_field_ri_cpu_time_qos_utility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_utility)
            )
        );
    }
    test_field_ri_cpu_time_qos_utility();
    fn test_field_ri_cpu_time_qos_legacy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_legacy)
            )
        );
    }
    test_field_ri_cpu_time_qos_legacy();
    fn test_field_ri_cpu_time_qos_user_initiated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_user_initiated)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_initiated();
    fn test_field_ri_cpu_time_qos_user_interactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cpu_time_qos_user_interactive)
            )
        );
    }
    test_field_ri_cpu_time_qos_user_interactive();
    fn test_field_ri_billed_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_billed_system_time)
            )
        );
    }
    test_field_ri_billed_system_time();
    fn test_field_ri_serviced_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_serviced_system_time)
            )
        );
    }
    test_field_ri_serviced_system_time();
    fn test_field_ri_logical_writes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_logical_writes)
            )
        );
    }
    test_field_ri_logical_writes();
    fn test_field_ri_lifetime_max_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_lifetime_max_phys_footprint)
            )
        );
    }
    test_field_ri_lifetime_max_phys_footprint();
    fn test_field_ri_instructions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_instructions)
            )
        );
    }
    test_field_ri_instructions();
    fn test_field_ri_cycles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_cycles)
            )
        );
    }
    test_field_ri_cycles();
    fn test_field_ri_billed_energy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_billed_energy)
            )
        );
    }
    test_field_ri_billed_energy();
    fn test_field_ri_serviced_energy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_serviced_energy)
            )
        );
    }
    test_field_ri_serviced_energy();
    fn test_field_ri_interval_max_phys_footprint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_interval_max_phys_footprint)
            )
        );
    }
    test_field_ri_interval_max_phys_footprint();
    fn test_field_ri_runnable_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_runnable_time)
            )
        );
    }
    test_field_ri_runnable_time();
    fn test_field_ri_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rusage_info_v5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(rusage_info_v5),
                "::",
                stringify!(ri_flags)
            )
        );
    }
    test_field_ri_flags();
}
pub type rusage_info_current = rusage_info_v5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    fn test_field_rlim_cur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rlimit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rlimit),
                "::",
                stringify!(rlim_cur)
            )
        );
    }
    test_field_rlim_cur();
    fn test_field_rlim_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rlimit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rlimit),
                "::",
                stringify!(rlim_max)
            )
        );
    }
    test_field_rlim_max();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    fn test_field_wm_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_rlimit_control_wakeupmon>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_rlimit_control_wakeupmon),
                "::",
                stringify!(wm_flags)
            )
        );
    }
    test_field_wm_flags();
    fn test_field_wm_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_rlimit_control_wakeupmon>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_rlimit_control_wakeupmon),
                "::",
                stringify!(wm_rate)
            )
        );
    }
    test_field_wm_rate();
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    fn test_field_w_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wait>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wait),
                "::",
                stringify!(w_status)
            )
        );
    }
    test_field_w_status();
    fn test_field_w_T() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wait>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
        );
    }
    test_field_w_T();
    fn test_field_w_S() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wait>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
        );
    }
    test_field_w_S();
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: size_t);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: size_t,
        __little: *const ::std::os::raw::c_void,
        __little_len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type jit_int8_t = ::std::os::raw::c_schar;
pub type jit_uint8_t = ::std::os::raw::c_uchar;
pub type jit_int16_t = ::std::os::raw::c_short;
pub type jit_uint16_t = ::std::os::raw::c_ushort;
pub type jit_int32_t = ::std::os::raw::c_int;
pub type jit_uint32_t = ::std::os::raw::c_uint;
pub type jit_int64_t = ::std::os::raw::c_long;
pub type jit_uint64_t = ::std::os::raw::c_ulong;
pub type jit_word_t = jit_int64_t;
pub type jit_uword_t = jit_uint64_t;
pub type jit_float32_t = f32;
pub type jit_float64_t = f64;
pub type jit_pointer_t = *mut ::std::os::raw::c_void;
pub type jit_bool_t = jit_int32_t;
pub type jit_gpr_t = jit_int32_t;
pub type jit_fpr_t = jit_int32_t;
pub const jit_reg_t__RAX: jit_reg_t = 0;
pub const jit_reg_t__R10: jit_reg_t = 1;
pub const jit_reg_t__R11: jit_reg_t = 2;
pub const jit_reg_t__RBX: jit_reg_t = 3;
pub const jit_reg_t__R13: jit_reg_t = 4;
pub const jit_reg_t__R14: jit_reg_t = 5;
pub const jit_reg_t__R15: jit_reg_t = 6;
pub const jit_reg_t__R12: jit_reg_t = 7;
pub const jit_reg_t__R9: jit_reg_t = 8;
pub const jit_reg_t__R8: jit_reg_t = 9;
pub const jit_reg_t__RCX: jit_reg_t = 10;
pub const jit_reg_t__RDX: jit_reg_t = 11;
pub const jit_reg_t__RSI: jit_reg_t = 12;
pub const jit_reg_t__RDI: jit_reg_t = 13;
pub const jit_reg_t__RSP: jit_reg_t = 14;
pub const jit_reg_t__RBP: jit_reg_t = 15;
pub const jit_reg_t__XMM8: jit_reg_t = 16;
pub const jit_reg_t__XMM9: jit_reg_t = 17;
pub const jit_reg_t__XMM10: jit_reg_t = 18;
pub const jit_reg_t__XMM11: jit_reg_t = 19;
pub const jit_reg_t__XMM12: jit_reg_t = 20;
pub const jit_reg_t__XMM13: jit_reg_t = 21;
pub const jit_reg_t__XMM14: jit_reg_t = 22;
pub const jit_reg_t__XMM15: jit_reg_t = 23;
pub const jit_reg_t__XMM7: jit_reg_t = 24;
pub const jit_reg_t__XMM6: jit_reg_t = 25;
pub const jit_reg_t__XMM5: jit_reg_t = 26;
pub const jit_reg_t__XMM4: jit_reg_t = 27;
pub const jit_reg_t__XMM3: jit_reg_t = 28;
pub const jit_reg_t__XMM2: jit_reg_t = 29;
pub const jit_reg_t__XMM1: jit_reg_t = 30;
pub const jit_reg_t__XMM0: jit_reg_t = 31;
pub const jit_reg_t__ST0: jit_reg_t = 32;
pub const jit_reg_t__ST1: jit_reg_t = 33;
pub const jit_reg_t__ST2: jit_reg_t = 34;
pub const jit_reg_t__ST3: jit_reg_t = 35;
pub const jit_reg_t__ST4: jit_reg_t = 36;
pub const jit_reg_t__ST5: jit_reg_t = 37;
pub const jit_reg_t__ST6: jit_reg_t = 38;
pub const jit_reg_t__NOREG: jit_reg_t = 39;
pub type jit_reg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct jit_cpu_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_jit_cpu_t() {
    assert_eq!(
        ::std::mem::size_of::<jit_cpu_t>(),
        4usize,
        concat!("Size of: ", stringify!(jit_cpu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<jit_cpu_t>(),
        4usize,
        concat!("Alignment of ", stringify!(jit_cpu_t))
    );
}
impl jit_cpu_t {
    #[inline]
    pub fn fpu(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fpu(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmpxchg8b(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmpxchg8b(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmov(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmov(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mmx(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mmx(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sse(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sse(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sse2(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sse2(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sse3(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sse3(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pclmulqdq(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pclmulqdq(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ssse3(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssse3(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fma(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fma(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmpxchg16b(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmpxchg16b(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sse4_1(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sse4_1(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sse4_2(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sse4_2(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn movbe(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_movbe(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn popcnt(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_popcnt(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aes(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aes(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn avx(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_avx(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lahf(&self) -> jit_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lahf(&mut self, val: jit_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fpu: jit_uint32_t,
        cmpxchg8b: jit_uint32_t,
        cmov: jit_uint32_t,
        mmx: jit_uint32_t,
        sse: jit_uint32_t,
        sse2: jit_uint32_t,
        sse3: jit_uint32_t,
        pclmulqdq: jit_uint32_t,
        ssse3: jit_uint32_t,
        fma: jit_uint32_t,
        cmpxchg16b: jit_uint32_t,
        sse4_1: jit_uint32_t,
        sse4_2: jit_uint32_t,
        movbe: jit_uint32_t,
        popcnt: jit_uint32_t,
        aes: jit_uint32_t,
        avx: jit_uint32_t,
        lahf: jit_uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fpu: u32 = unsafe { ::std::mem::transmute(fpu) };
            fpu as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cmpxchg8b: u32 = unsafe { ::std::mem::transmute(cmpxchg8b) };
            cmpxchg8b as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cmov: u32 = unsafe { ::std::mem::transmute(cmov) };
            cmov as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mmx: u32 = unsafe { ::std::mem::transmute(mmx) };
            mmx as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sse: u32 = unsafe { ::std::mem::transmute(sse) };
            sse as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sse2: u32 = unsafe { ::std::mem::transmute(sse2) };
            sse2 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sse3: u32 = unsafe { ::std::mem::transmute(sse3) };
            sse3 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pclmulqdq: u32 = unsafe { ::std::mem::transmute(pclmulqdq) };
            pclmulqdq as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ssse3: u32 = unsafe { ::std::mem::transmute(ssse3) };
            ssse3 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let fma: u32 = unsafe { ::std::mem::transmute(fma) };
            fma as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let cmpxchg16b: u32 = unsafe { ::std::mem::transmute(cmpxchg16b) };
            cmpxchg16b as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sse4_1: u32 = unsafe { ::std::mem::transmute(sse4_1) };
            sse4_1 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let sse4_2: u32 = unsafe { ::std::mem::transmute(sse4_2) };
            sse4_2 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let movbe: u32 = unsafe { ::std::mem::transmute(movbe) };
            movbe as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let popcnt: u32 = unsafe { ::std::mem::transmute(popcnt) };
            popcnt as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let aes: u32 = unsafe { ::std::mem::transmute(aes) };
            aes as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let avx: u32 = unsafe { ::std::mem::transmute(avx) };
            avx as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let lahf: u32 = unsafe { ::std::mem::transmute(lahf) };
            lahf as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut jit_cpu: jit_cpu_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jit_node {
    _unused: [u8; 0],
}
pub type jit_node_t = jit_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jit_state {
    _unused: [u8; 0],
}
pub type jit_state_t = jit_state;
pub const jit_code_t_jit_code_data: jit_code_t = 0;
pub const jit_code_t_jit_code_live: jit_code_t = 1;
pub const jit_code_t_jit_code_align: jit_code_t = 2;
pub const jit_code_t_jit_code_save: jit_code_t = 3;
pub const jit_code_t_jit_code_load: jit_code_t = 4;
pub const jit_code_t_jit_code_name: jit_code_t = 5;
pub const jit_code_t_jit_code_note: jit_code_t = 6;
pub const jit_code_t_jit_code_label: jit_code_t = 7;
pub const jit_code_t_jit_code_prolog: jit_code_t = 8;
pub const jit_code_t_jit_code_ellipsis: jit_code_t = 9;
pub const jit_code_t_jit_code_va_push: jit_code_t = 10;
pub const jit_code_t_jit_code_allocai: jit_code_t = 11;
pub const jit_code_t_jit_code_allocar: jit_code_t = 12;
pub const jit_code_t_jit_code_arg: jit_code_t = 13;
pub const jit_code_t_jit_code_getarg_c: jit_code_t = 14;
pub const jit_code_t_jit_code_getarg_uc: jit_code_t = 15;
pub const jit_code_t_jit_code_getarg_s: jit_code_t = 16;
pub const jit_code_t_jit_code_getarg_us: jit_code_t = 17;
pub const jit_code_t_jit_code_getarg_i: jit_code_t = 18;
pub const jit_code_t_jit_code_getarg_ui: jit_code_t = 19;
pub const jit_code_t_jit_code_getarg_l: jit_code_t = 20;
pub const jit_code_t_jit_code_putargr: jit_code_t = 21;
pub const jit_code_t_jit_code_putargi: jit_code_t = 22;
pub const jit_code_t_jit_code_va_start: jit_code_t = 23;
pub const jit_code_t_jit_code_va_arg: jit_code_t = 24;
pub const jit_code_t_jit_code_va_arg_d: jit_code_t = 25;
pub const jit_code_t_jit_code_va_end: jit_code_t = 26;
pub const jit_code_t_jit_code_addr: jit_code_t = 27;
pub const jit_code_t_jit_code_addi: jit_code_t = 28;
pub const jit_code_t_jit_code_addcr: jit_code_t = 29;
pub const jit_code_t_jit_code_addci: jit_code_t = 30;
pub const jit_code_t_jit_code_addxr: jit_code_t = 31;
pub const jit_code_t_jit_code_addxi: jit_code_t = 32;
pub const jit_code_t_jit_code_subr: jit_code_t = 33;
pub const jit_code_t_jit_code_subi: jit_code_t = 34;
pub const jit_code_t_jit_code_subcr: jit_code_t = 35;
pub const jit_code_t_jit_code_subci: jit_code_t = 36;
pub const jit_code_t_jit_code_subxr: jit_code_t = 37;
pub const jit_code_t_jit_code_subxi: jit_code_t = 38;
pub const jit_code_t_jit_code_rsbi: jit_code_t = 39;
pub const jit_code_t_jit_code_mulr: jit_code_t = 40;
pub const jit_code_t_jit_code_muli: jit_code_t = 41;
pub const jit_code_t_jit_code_qmulr: jit_code_t = 42;
pub const jit_code_t_jit_code_qmuli: jit_code_t = 43;
pub const jit_code_t_jit_code_qmulr_u: jit_code_t = 44;
pub const jit_code_t_jit_code_qmuli_u: jit_code_t = 45;
pub const jit_code_t_jit_code_divr: jit_code_t = 46;
pub const jit_code_t_jit_code_divi: jit_code_t = 47;
pub const jit_code_t_jit_code_divr_u: jit_code_t = 48;
pub const jit_code_t_jit_code_divi_u: jit_code_t = 49;
pub const jit_code_t_jit_code_qdivr: jit_code_t = 50;
pub const jit_code_t_jit_code_qdivi: jit_code_t = 51;
pub const jit_code_t_jit_code_qdivr_u: jit_code_t = 52;
pub const jit_code_t_jit_code_qdivi_u: jit_code_t = 53;
pub const jit_code_t_jit_code_remr: jit_code_t = 54;
pub const jit_code_t_jit_code_remi: jit_code_t = 55;
pub const jit_code_t_jit_code_remr_u: jit_code_t = 56;
pub const jit_code_t_jit_code_remi_u: jit_code_t = 57;
pub const jit_code_t_jit_code_andr: jit_code_t = 58;
pub const jit_code_t_jit_code_andi: jit_code_t = 59;
pub const jit_code_t_jit_code_orr: jit_code_t = 60;
pub const jit_code_t_jit_code_ori: jit_code_t = 61;
pub const jit_code_t_jit_code_xorr: jit_code_t = 62;
pub const jit_code_t_jit_code_xori: jit_code_t = 63;
pub const jit_code_t_jit_code_lshr: jit_code_t = 64;
pub const jit_code_t_jit_code_lshi: jit_code_t = 65;
pub const jit_code_t_jit_code_rshr: jit_code_t = 66;
pub const jit_code_t_jit_code_rshi: jit_code_t = 67;
pub const jit_code_t_jit_code_rshr_u: jit_code_t = 68;
pub const jit_code_t_jit_code_rshi_u: jit_code_t = 69;
pub const jit_code_t_jit_code_negr: jit_code_t = 70;
pub const jit_code_t_jit_code_comr: jit_code_t = 71;
pub const jit_code_t_jit_code_ltr: jit_code_t = 72;
pub const jit_code_t_jit_code_lti: jit_code_t = 73;
pub const jit_code_t_jit_code_ltr_u: jit_code_t = 74;
pub const jit_code_t_jit_code_lti_u: jit_code_t = 75;
pub const jit_code_t_jit_code_ler: jit_code_t = 76;
pub const jit_code_t_jit_code_lei: jit_code_t = 77;
pub const jit_code_t_jit_code_ler_u: jit_code_t = 78;
pub const jit_code_t_jit_code_lei_u: jit_code_t = 79;
pub const jit_code_t_jit_code_eqr: jit_code_t = 80;
pub const jit_code_t_jit_code_eqi: jit_code_t = 81;
pub const jit_code_t_jit_code_ger: jit_code_t = 82;
pub const jit_code_t_jit_code_gei: jit_code_t = 83;
pub const jit_code_t_jit_code_ger_u: jit_code_t = 84;
pub const jit_code_t_jit_code_gei_u: jit_code_t = 85;
pub const jit_code_t_jit_code_gtr: jit_code_t = 86;
pub const jit_code_t_jit_code_gti: jit_code_t = 87;
pub const jit_code_t_jit_code_gtr_u: jit_code_t = 88;
pub const jit_code_t_jit_code_gti_u: jit_code_t = 89;
pub const jit_code_t_jit_code_ner: jit_code_t = 90;
pub const jit_code_t_jit_code_nei: jit_code_t = 91;
pub const jit_code_t_jit_code_movr: jit_code_t = 92;
pub const jit_code_t_jit_code_movi: jit_code_t = 93;
pub const jit_code_t_jit_code_extr_c: jit_code_t = 94;
pub const jit_code_t_jit_code_extr_uc: jit_code_t = 95;
pub const jit_code_t_jit_code_extr_s: jit_code_t = 96;
pub const jit_code_t_jit_code_extr_us: jit_code_t = 97;
pub const jit_code_t_jit_code_extr_i: jit_code_t = 98;
pub const jit_code_t_jit_code_extr_ui: jit_code_t = 99;
pub const jit_code_t_jit_code_htonr_us: jit_code_t = 100;
pub const jit_code_t_jit_code_htonr_ui: jit_code_t = 101;
pub const jit_code_t_jit_code_htonr_ul: jit_code_t = 102;
pub const jit_code_t_jit_code_ldr_c: jit_code_t = 103;
pub const jit_code_t_jit_code_ldi_c: jit_code_t = 104;
pub const jit_code_t_jit_code_ldr_uc: jit_code_t = 105;
pub const jit_code_t_jit_code_ldi_uc: jit_code_t = 106;
pub const jit_code_t_jit_code_ldr_s: jit_code_t = 107;
pub const jit_code_t_jit_code_ldi_s: jit_code_t = 108;
pub const jit_code_t_jit_code_ldr_us: jit_code_t = 109;
pub const jit_code_t_jit_code_ldi_us: jit_code_t = 110;
pub const jit_code_t_jit_code_ldr_i: jit_code_t = 111;
pub const jit_code_t_jit_code_ldi_i: jit_code_t = 112;
pub const jit_code_t_jit_code_ldr_ui: jit_code_t = 113;
pub const jit_code_t_jit_code_ldi_ui: jit_code_t = 114;
pub const jit_code_t_jit_code_ldr_l: jit_code_t = 115;
pub const jit_code_t_jit_code_ldi_l: jit_code_t = 116;
pub const jit_code_t_jit_code_ldxr_c: jit_code_t = 117;
pub const jit_code_t_jit_code_ldxi_c: jit_code_t = 118;
pub const jit_code_t_jit_code_ldxr_uc: jit_code_t = 119;
pub const jit_code_t_jit_code_ldxi_uc: jit_code_t = 120;
pub const jit_code_t_jit_code_ldxr_s: jit_code_t = 121;
pub const jit_code_t_jit_code_ldxi_s: jit_code_t = 122;
pub const jit_code_t_jit_code_ldxr_us: jit_code_t = 123;
pub const jit_code_t_jit_code_ldxi_us: jit_code_t = 124;
pub const jit_code_t_jit_code_ldxr_i: jit_code_t = 125;
pub const jit_code_t_jit_code_ldxi_i: jit_code_t = 126;
pub const jit_code_t_jit_code_ldxr_ui: jit_code_t = 127;
pub const jit_code_t_jit_code_ldxi_ui: jit_code_t = 128;
pub const jit_code_t_jit_code_ldxr_l: jit_code_t = 129;
pub const jit_code_t_jit_code_ldxi_l: jit_code_t = 130;
pub const jit_code_t_jit_code_str_c: jit_code_t = 131;
pub const jit_code_t_jit_code_sti_c: jit_code_t = 132;
pub const jit_code_t_jit_code_str_s: jit_code_t = 133;
pub const jit_code_t_jit_code_sti_s: jit_code_t = 134;
pub const jit_code_t_jit_code_str_i: jit_code_t = 135;
pub const jit_code_t_jit_code_sti_i: jit_code_t = 136;
pub const jit_code_t_jit_code_str_l: jit_code_t = 137;
pub const jit_code_t_jit_code_sti_l: jit_code_t = 138;
pub const jit_code_t_jit_code_stxr_c: jit_code_t = 139;
pub const jit_code_t_jit_code_stxi_c: jit_code_t = 140;
pub const jit_code_t_jit_code_stxr_s: jit_code_t = 141;
pub const jit_code_t_jit_code_stxi_s: jit_code_t = 142;
pub const jit_code_t_jit_code_stxr_i: jit_code_t = 143;
pub const jit_code_t_jit_code_stxi_i: jit_code_t = 144;
pub const jit_code_t_jit_code_stxr_l: jit_code_t = 145;
pub const jit_code_t_jit_code_stxi_l: jit_code_t = 146;
pub const jit_code_t_jit_code_bltr: jit_code_t = 147;
pub const jit_code_t_jit_code_blti: jit_code_t = 148;
pub const jit_code_t_jit_code_bltr_u: jit_code_t = 149;
pub const jit_code_t_jit_code_blti_u: jit_code_t = 150;
pub const jit_code_t_jit_code_bler: jit_code_t = 151;
pub const jit_code_t_jit_code_blei: jit_code_t = 152;
pub const jit_code_t_jit_code_bler_u: jit_code_t = 153;
pub const jit_code_t_jit_code_blei_u: jit_code_t = 154;
pub const jit_code_t_jit_code_beqr: jit_code_t = 155;
pub const jit_code_t_jit_code_beqi: jit_code_t = 156;
pub const jit_code_t_jit_code_bger: jit_code_t = 157;
pub const jit_code_t_jit_code_bgei: jit_code_t = 158;
pub const jit_code_t_jit_code_bger_u: jit_code_t = 159;
pub const jit_code_t_jit_code_bgei_u: jit_code_t = 160;
pub const jit_code_t_jit_code_bgtr: jit_code_t = 161;
pub const jit_code_t_jit_code_bgti: jit_code_t = 162;
pub const jit_code_t_jit_code_bgtr_u: jit_code_t = 163;
pub const jit_code_t_jit_code_bgti_u: jit_code_t = 164;
pub const jit_code_t_jit_code_bner: jit_code_t = 165;
pub const jit_code_t_jit_code_bnei: jit_code_t = 166;
pub const jit_code_t_jit_code_bmsr: jit_code_t = 167;
pub const jit_code_t_jit_code_bmsi: jit_code_t = 168;
pub const jit_code_t_jit_code_bmcr: jit_code_t = 169;
pub const jit_code_t_jit_code_bmci: jit_code_t = 170;
pub const jit_code_t_jit_code_boaddr: jit_code_t = 171;
pub const jit_code_t_jit_code_boaddi: jit_code_t = 172;
pub const jit_code_t_jit_code_boaddr_u: jit_code_t = 173;
pub const jit_code_t_jit_code_boaddi_u: jit_code_t = 174;
pub const jit_code_t_jit_code_bxaddr: jit_code_t = 175;
pub const jit_code_t_jit_code_bxaddi: jit_code_t = 176;
pub const jit_code_t_jit_code_bxaddr_u: jit_code_t = 177;
pub const jit_code_t_jit_code_bxaddi_u: jit_code_t = 178;
pub const jit_code_t_jit_code_bosubr: jit_code_t = 179;
pub const jit_code_t_jit_code_bosubi: jit_code_t = 180;
pub const jit_code_t_jit_code_bosubr_u: jit_code_t = 181;
pub const jit_code_t_jit_code_bosubi_u: jit_code_t = 182;
pub const jit_code_t_jit_code_bxsubr: jit_code_t = 183;
pub const jit_code_t_jit_code_bxsubi: jit_code_t = 184;
pub const jit_code_t_jit_code_bxsubr_u: jit_code_t = 185;
pub const jit_code_t_jit_code_bxsubi_u: jit_code_t = 186;
pub const jit_code_t_jit_code_jmpr: jit_code_t = 187;
pub const jit_code_t_jit_code_jmpi: jit_code_t = 188;
pub const jit_code_t_jit_code_callr: jit_code_t = 189;
pub const jit_code_t_jit_code_calli: jit_code_t = 190;
pub const jit_code_t_jit_code_prepare: jit_code_t = 191;
pub const jit_code_t_jit_code_pushargr: jit_code_t = 192;
pub const jit_code_t_jit_code_pushargi: jit_code_t = 193;
pub const jit_code_t_jit_code_finishr: jit_code_t = 194;
pub const jit_code_t_jit_code_finishi: jit_code_t = 195;
pub const jit_code_t_jit_code_ret: jit_code_t = 196;
pub const jit_code_t_jit_code_retr: jit_code_t = 197;
pub const jit_code_t_jit_code_reti: jit_code_t = 198;
pub const jit_code_t_jit_code_retval_c: jit_code_t = 199;
pub const jit_code_t_jit_code_retval_uc: jit_code_t = 200;
pub const jit_code_t_jit_code_retval_s: jit_code_t = 201;
pub const jit_code_t_jit_code_retval_us: jit_code_t = 202;
pub const jit_code_t_jit_code_retval_i: jit_code_t = 203;
pub const jit_code_t_jit_code_retval_ui: jit_code_t = 204;
pub const jit_code_t_jit_code_retval_l: jit_code_t = 205;
pub const jit_code_t_jit_code_epilog: jit_code_t = 206;
pub const jit_code_t_jit_code_arg_f: jit_code_t = 207;
pub const jit_code_t_jit_code_getarg_f: jit_code_t = 208;
pub const jit_code_t_jit_code_putargr_f: jit_code_t = 209;
pub const jit_code_t_jit_code_putargi_f: jit_code_t = 210;
pub const jit_code_t_jit_code_addr_f: jit_code_t = 211;
pub const jit_code_t_jit_code_addi_f: jit_code_t = 212;
pub const jit_code_t_jit_code_subr_f: jit_code_t = 213;
pub const jit_code_t_jit_code_subi_f: jit_code_t = 214;
pub const jit_code_t_jit_code_rsbi_f: jit_code_t = 215;
pub const jit_code_t_jit_code_mulr_f: jit_code_t = 216;
pub const jit_code_t_jit_code_muli_f: jit_code_t = 217;
pub const jit_code_t_jit_code_divr_f: jit_code_t = 218;
pub const jit_code_t_jit_code_divi_f: jit_code_t = 219;
pub const jit_code_t_jit_code_negr_f: jit_code_t = 220;
pub const jit_code_t_jit_code_absr_f: jit_code_t = 221;
pub const jit_code_t_jit_code_sqrtr_f: jit_code_t = 222;
pub const jit_code_t_jit_code_ltr_f: jit_code_t = 223;
pub const jit_code_t_jit_code_lti_f: jit_code_t = 224;
pub const jit_code_t_jit_code_ler_f: jit_code_t = 225;
pub const jit_code_t_jit_code_lei_f: jit_code_t = 226;
pub const jit_code_t_jit_code_eqr_f: jit_code_t = 227;
pub const jit_code_t_jit_code_eqi_f: jit_code_t = 228;
pub const jit_code_t_jit_code_ger_f: jit_code_t = 229;
pub const jit_code_t_jit_code_gei_f: jit_code_t = 230;
pub const jit_code_t_jit_code_gtr_f: jit_code_t = 231;
pub const jit_code_t_jit_code_gti_f: jit_code_t = 232;
pub const jit_code_t_jit_code_ner_f: jit_code_t = 233;
pub const jit_code_t_jit_code_nei_f: jit_code_t = 234;
pub const jit_code_t_jit_code_unltr_f: jit_code_t = 235;
pub const jit_code_t_jit_code_unlti_f: jit_code_t = 236;
pub const jit_code_t_jit_code_unler_f: jit_code_t = 237;
pub const jit_code_t_jit_code_unlei_f: jit_code_t = 238;
pub const jit_code_t_jit_code_uneqr_f: jit_code_t = 239;
pub const jit_code_t_jit_code_uneqi_f: jit_code_t = 240;
pub const jit_code_t_jit_code_unger_f: jit_code_t = 241;
pub const jit_code_t_jit_code_ungei_f: jit_code_t = 242;
pub const jit_code_t_jit_code_ungtr_f: jit_code_t = 243;
pub const jit_code_t_jit_code_ungti_f: jit_code_t = 244;
pub const jit_code_t_jit_code_ltgtr_f: jit_code_t = 245;
pub const jit_code_t_jit_code_ltgti_f: jit_code_t = 246;
pub const jit_code_t_jit_code_ordr_f: jit_code_t = 247;
pub const jit_code_t_jit_code_ordi_f: jit_code_t = 248;
pub const jit_code_t_jit_code_unordr_f: jit_code_t = 249;
pub const jit_code_t_jit_code_unordi_f: jit_code_t = 250;
pub const jit_code_t_jit_code_truncr_f_i: jit_code_t = 251;
pub const jit_code_t_jit_code_truncr_f_l: jit_code_t = 252;
pub const jit_code_t_jit_code_extr_f: jit_code_t = 253;
pub const jit_code_t_jit_code_extr_d_f: jit_code_t = 254;
pub const jit_code_t_jit_code_movr_f: jit_code_t = 255;
pub const jit_code_t_jit_code_movi_f: jit_code_t = 256;
pub const jit_code_t_jit_code_ldr_f: jit_code_t = 257;
pub const jit_code_t_jit_code_ldi_f: jit_code_t = 258;
pub const jit_code_t_jit_code_ldxr_f: jit_code_t = 259;
pub const jit_code_t_jit_code_ldxi_f: jit_code_t = 260;
pub const jit_code_t_jit_code_str_f: jit_code_t = 261;
pub const jit_code_t_jit_code_sti_f: jit_code_t = 262;
pub const jit_code_t_jit_code_stxr_f: jit_code_t = 263;
pub const jit_code_t_jit_code_stxi_f: jit_code_t = 264;
pub const jit_code_t_jit_code_bltr_f: jit_code_t = 265;
pub const jit_code_t_jit_code_blti_f: jit_code_t = 266;
pub const jit_code_t_jit_code_bler_f: jit_code_t = 267;
pub const jit_code_t_jit_code_blei_f: jit_code_t = 268;
pub const jit_code_t_jit_code_beqr_f: jit_code_t = 269;
pub const jit_code_t_jit_code_beqi_f: jit_code_t = 270;
pub const jit_code_t_jit_code_bger_f: jit_code_t = 271;
pub const jit_code_t_jit_code_bgei_f: jit_code_t = 272;
pub const jit_code_t_jit_code_bgtr_f: jit_code_t = 273;
pub const jit_code_t_jit_code_bgti_f: jit_code_t = 274;
pub const jit_code_t_jit_code_bner_f: jit_code_t = 275;
pub const jit_code_t_jit_code_bnei_f: jit_code_t = 276;
pub const jit_code_t_jit_code_bunltr_f: jit_code_t = 277;
pub const jit_code_t_jit_code_bunlti_f: jit_code_t = 278;
pub const jit_code_t_jit_code_bunler_f: jit_code_t = 279;
pub const jit_code_t_jit_code_bunlei_f: jit_code_t = 280;
pub const jit_code_t_jit_code_buneqr_f: jit_code_t = 281;
pub const jit_code_t_jit_code_buneqi_f: jit_code_t = 282;
pub const jit_code_t_jit_code_bunger_f: jit_code_t = 283;
pub const jit_code_t_jit_code_bungei_f: jit_code_t = 284;
pub const jit_code_t_jit_code_bungtr_f: jit_code_t = 285;
pub const jit_code_t_jit_code_bungti_f: jit_code_t = 286;
pub const jit_code_t_jit_code_bltgtr_f: jit_code_t = 287;
pub const jit_code_t_jit_code_bltgti_f: jit_code_t = 288;
pub const jit_code_t_jit_code_bordr_f: jit_code_t = 289;
pub const jit_code_t_jit_code_bordi_f: jit_code_t = 290;
pub const jit_code_t_jit_code_bunordr_f: jit_code_t = 291;
pub const jit_code_t_jit_code_bunordi_f: jit_code_t = 292;
pub const jit_code_t_jit_code_pushargr_f: jit_code_t = 293;
pub const jit_code_t_jit_code_pushargi_f: jit_code_t = 294;
pub const jit_code_t_jit_code_retr_f: jit_code_t = 295;
pub const jit_code_t_jit_code_reti_f: jit_code_t = 296;
pub const jit_code_t_jit_code_retval_f: jit_code_t = 297;
pub const jit_code_t_jit_code_arg_d: jit_code_t = 298;
pub const jit_code_t_jit_code_getarg_d: jit_code_t = 299;
pub const jit_code_t_jit_code_putargr_d: jit_code_t = 300;
pub const jit_code_t_jit_code_putargi_d: jit_code_t = 301;
pub const jit_code_t_jit_code_addr_d: jit_code_t = 302;
pub const jit_code_t_jit_code_addi_d: jit_code_t = 303;
pub const jit_code_t_jit_code_subr_d: jit_code_t = 304;
pub const jit_code_t_jit_code_subi_d: jit_code_t = 305;
pub const jit_code_t_jit_code_rsbi_d: jit_code_t = 306;
pub const jit_code_t_jit_code_mulr_d: jit_code_t = 307;
pub const jit_code_t_jit_code_muli_d: jit_code_t = 308;
pub const jit_code_t_jit_code_divr_d: jit_code_t = 309;
pub const jit_code_t_jit_code_divi_d: jit_code_t = 310;
pub const jit_code_t_jit_code_negr_d: jit_code_t = 311;
pub const jit_code_t_jit_code_absr_d: jit_code_t = 312;
pub const jit_code_t_jit_code_sqrtr_d: jit_code_t = 313;
pub const jit_code_t_jit_code_ltr_d: jit_code_t = 314;
pub const jit_code_t_jit_code_lti_d: jit_code_t = 315;
pub const jit_code_t_jit_code_ler_d: jit_code_t = 316;
pub const jit_code_t_jit_code_lei_d: jit_code_t = 317;
pub const jit_code_t_jit_code_eqr_d: jit_code_t = 318;
pub const jit_code_t_jit_code_eqi_d: jit_code_t = 319;
pub const jit_code_t_jit_code_ger_d: jit_code_t = 320;
pub const jit_code_t_jit_code_gei_d: jit_code_t = 321;
pub const jit_code_t_jit_code_gtr_d: jit_code_t = 322;
pub const jit_code_t_jit_code_gti_d: jit_code_t = 323;
pub const jit_code_t_jit_code_ner_d: jit_code_t = 324;
pub const jit_code_t_jit_code_nei_d: jit_code_t = 325;
pub const jit_code_t_jit_code_unltr_d: jit_code_t = 326;
pub const jit_code_t_jit_code_unlti_d: jit_code_t = 327;
pub const jit_code_t_jit_code_unler_d: jit_code_t = 328;
pub const jit_code_t_jit_code_unlei_d: jit_code_t = 329;
pub const jit_code_t_jit_code_uneqr_d: jit_code_t = 330;
pub const jit_code_t_jit_code_uneqi_d: jit_code_t = 331;
pub const jit_code_t_jit_code_unger_d: jit_code_t = 332;
pub const jit_code_t_jit_code_ungei_d: jit_code_t = 333;
pub const jit_code_t_jit_code_ungtr_d: jit_code_t = 334;
pub const jit_code_t_jit_code_ungti_d: jit_code_t = 335;
pub const jit_code_t_jit_code_ltgtr_d: jit_code_t = 336;
pub const jit_code_t_jit_code_ltgti_d: jit_code_t = 337;
pub const jit_code_t_jit_code_ordr_d: jit_code_t = 338;
pub const jit_code_t_jit_code_ordi_d: jit_code_t = 339;
pub const jit_code_t_jit_code_unordr_d: jit_code_t = 340;
pub const jit_code_t_jit_code_unordi_d: jit_code_t = 341;
pub const jit_code_t_jit_code_truncr_d_i: jit_code_t = 342;
pub const jit_code_t_jit_code_truncr_d_l: jit_code_t = 343;
pub const jit_code_t_jit_code_extr_d: jit_code_t = 344;
pub const jit_code_t_jit_code_extr_f_d: jit_code_t = 345;
pub const jit_code_t_jit_code_movr_d: jit_code_t = 346;
pub const jit_code_t_jit_code_movi_d: jit_code_t = 347;
pub const jit_code_t_jit_code_ldr_d: jit_code_t = 348;
pub const jit_code_t_jit_code_ldi_d: jit_code_t = 349;
pub const jit_code_t_jit_code_ldxr_d: jit_code_t = 350;
pub const jit_code_t_jit_code_ldxi_d: jit_code_t = 351;
pub const jit_code_t_jit_code_str_d: jit_code_t = 352;
pub const jit_code_t_jit_code_sti_d: jit_code_t = 353;
pub const jit_code_t_jit_code_stxr_d: jit_code_t = 354;
pub const jit_code_t_jit_code_stxi_d: jit_code_t = 355;
pub const jit_code_t_jit_code_bltr_d: jit_code_t = 356;
pub const jit_code_t_jit_code_blti_d: jit_code_t = 357;
pub const jit_code_t_jit_code_bler_d: jit_code_t = 358;
pub const jit_code_t_jit_code_blei_d: jit_code_t = 359;
pub const jit_code_t_jit_code_beqr_d: jit_code_t = 360;
pub const jit_code_t_jit_code_beqi_d: jit_code_t = 361;
pub const jit_code_t_jit_code_bger_d: jit_code_t = 362;
pub const jit_code_t_jit_code_bgei_d: jit_code_t = 363;
pub const jit_code_t_jit_code_bgtr_d: jit_code_t = 364;
pub const jit_code_t_jit_code_bgti_d: jit_code_t = 365;
pub const jit_code_t_jit_code_bner_d: jit_code_t = 366;
pub const jit_code_t_jit_code_bnei_d: jit_code_t = 367;
pub const jit_code_t_jit_code_bunltr_d: jit_code_t = 368;
pub const jit_code_t_jit_code_bunlti_d: jit_code_t = 369;
pub const jit_code_t_jit_code_bunler_d: jit_code_t = 370;
pub const jit_code_t_jit_code_bunlei_d: jit_code_t = 371;
pub const jit_code_t_jit_code_buneqr_d: jit_code_t = 372;
pub const jit_code_t_jit_code_buneqi_d: jit_code_t = 373;
pub const jit_code_t_jit_code_bunger_d: jit_code_t = 374;
pub const jit_code_t_jit_code_bungei_d: jit_code_t = 375;
pub const jit_code_t_jit_code_bungtr_d: jit_code_t = 376;
pub const jit_code_t_jit_code_bungti_d: jit_code_t = 377;
pub const jit_code_t_jit_code_bltgtr_d: jit_code_t = 378;
pub const jit_code_t_jit_code_bltgti_d: jit_code_t = 379;
pub const jit_code_t_jit_code_bordr_d: jit_code_t = 380;
pub const jit_code_t_jit_code_bordi_d: jit_code_t = 381;
pub const jit_code_t_jit_code_bunordr_d: jit_code_t = 382;
pub const jit_code_t_jit_code_bunordi_d: jit_code_t = 383;
pub const jit_code_t_jit_code_pushargr_d: jit_code_t = 384;
pub const jit_code_t_jit_code_pushargi_d: jit_code_t = 385;
pub const jit_code_t_jit_code_retr_d: jit_code_t = 386;
pub const jit_code_t_jit_code_reti_d: jit_code_t = 387;
pub const jit_code_t_jit_code_retval_d: jit_code_t = 388;
pub const jit_code_t_jit_code_movr_w_f: jit_code_t = 389;
pub const jit_code_t_jit_code_movr_ww_d: jit_code_t = 390;
pub const jit_code_t_jit_code_movr_w_d: jit_code_t = 391;
pub const jit_code_t_jit_code_movr_f_w: jit_code_t = 392;
pub const jit_code_t_jit_code_movi_f_w: jit_code_t = 393;
pub const jit_code_t_jit_code_movr_d_ww: jit_code_t = 394;
pub const jit_code_t_jit_code_movi_d_ww: jit_code_t = 395;
pub const jit_code_t_jit_code_movr_d_w: jit_code_t = 396;
pub const jit_code_t_jit_code_movi_d_w: jit_code_t = 397;
pub const jit_code_t_jit_code_last_code: jit_code_t = 398;
pub type jit_code_t = ::std::os::raw::c_uint;
pub type jit_alloc_func_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void>;
pub type jit_realloc_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type jit_free_func_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn init_jit(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn finish_jit();
}
extern "C" {
    pub fn jit_new_state() -> *mut jit_state_t;
}
extern "C" {
    pub fn _jit_clear_state(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_destroy_state(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_address(arg1: *mut jit_state_t, arg2: *mut jit_node_t) -> jit_pointer_t;
}
extern "C" {
    pub fn _jit_name(
        arg1: *mut jit_state_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_note(
        arg1: *mut jit_state_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_label(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_forward(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_indirect(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_link(arg1: *mut jit_state_t, arg2: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_forward_p(arg1: *mut jit_state_t, arg2: *mut jit_node_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_indirect_p(arg1: *mut jit_state_t, arg2: *mut jit_node_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_target_p(arg1: *mut jit_state_t, arg2: *mut jit_node_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_prolog(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_allocai(arg1: *mut jit_state_t, arg2: jit_int32_t) -> jit_int32_t;
}
extern "C" {
    pub fn _jit_allocar(arg1: *mut jit_state_t, arg2: jit_int32_t, arg3: jit_int32_t);
}
extern "C" {
    pub fn _jit_ellipsis(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_arg(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_getarg_c(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_uc(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_s(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_us(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_i(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_ui(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_getarg_l(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargr(arg1: *mut jit_state_t, arg2: jit_gpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargi(arg1: *mut jit_state_t, arg2: jit_word_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_prepare(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_va_push(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_pushargr(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_pushargi(arg1: *mut jit_state_t, arg2: jit_word_t);
}
extern "C" {
    pub fn _jit_finishr(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_finishi(arg1: *mut jit_state_t, arg2: jit_pointer_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_ret(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_retr(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_reti(arg1: *mut jit_state_t, arg2: jit_word_t);
}
extern "C" {
    pub fn _jit_retval_c(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_uc(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_s(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_us(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_i(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_ui(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_retval_l(arg1: *mut jit_state_t, arg2: jit_gpr_t);
}
extern "C" {
    pub fn _jit_epilog(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_patch(arg1: *mut jit_state_t, arg2: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_patch_at(arg1: *mut jit_state_t, arg2: *mut jit_node_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_patch_abs(arg1: *mut jit_state_t, arg2: *mut jit_node_t, arg3: jit_pointer_t);
}
extern "C" {
    pub fn _jit_realize(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_get_code(arg1: *mut jit_state_t, arg2: *mut jit_word_t) -> jit_pointer_t;
}
extern "C" {
    pub fn _jit_set_code(arg1: *mut jit_state_t, arg2: jit_pointer_t, arg3: jit_word_t);
}
extern "C" {
    pub fn _jit_get_data(
        arg1: *mut jit_state_t,
        arg2: *mut jit_word_t,
        arg3: *mut jit_word_t,
    ) -> jit_pointer_t;
}
extern "C" {
    pub fn _jit_set_data(
        arg1: *mut jit_state_t,
        arg2: jit_pointer_t,
        arg3: jit_word_t,
        arg4: jit_word_t,
    );
}
extern "C" {
    pub fn _jit_frame(arg1: *mut jit_state_t, arg2: jit_int32_t);
}
extern "C" {
    pub fn _jit_tramp(arg1: *mut jit_state_t, arg2: jit_int32_t);
}
extern "C" {
    pub fn _jit_emit(arg1: *mut jit_state_t) -> jit_pointer_t;
}
extern "C" {
    pub fn _jit_print(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn _jit_arg_f(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_getarg_f(arg1: *mut jit_state_t, arg2: jit_fpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargr_f(arg1: *mut jit_state_t, arg2: jit_fpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargi_f(arg1: *mut jit_state_t, arg2: jit_float32_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_pushargr_f(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_pushargi_f(arg1: *mut jit_state_t, arg2: jit_float32_t);
}
extern "C" {
    pub fn _jit_retr_f(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_reti_f(arg1: *mut jit_state_t, arg2: jit_float32_t);
}
extern "C" {
    pub fn _jit_retval_f(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_arg_d(arg1: *mut jit_state_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_getarg_d(arg1: *mut jit_state_t, arg2: jit_fpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargr_d(arg1: *mut jit_state_t, arg2: jit_fpr_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_putargi_d(arg1: *mut jit_state_t, arg2: jit_float64_t, arg3: *mut jit_node_t);
}
extern "C" {
    pub fn _jit_pushargr_d(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_pushargi_d(arg1: *mut jit_state_t, arg2: jit_float64_t);
}
extern "C" {
    pub fn _jit_retr_d(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_reti_d(arg1: *mut jit_state_t, arg2: jit_float64_t);
}
extern "C" {
    pub fn _jit_retval_d(arg1: *mut jit_state_t, arg2: jit_fpr_t);
}
extern "C" {
    pub fn _jit_new_node(arg1: *mut jit_state_t, arg2: jit_code_t) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_w(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_f(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_float32_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_d(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_float64_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_p(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_pointer_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_ww(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_wp(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_pointer_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_fp(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_float32_t,
        arg4: jit_pointer_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_dp(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_float64_t,
        arg4: jit_pointer_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_pw(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_pointer_t,
        arg4: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_wf(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_float32_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_wd(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_float64_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_www(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_word_t,
        arg5: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_qww(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_int32_t,
        arg4: jit_int32_t,
        arg5: jit_word_t,
        arg6: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_wwf(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_word_t,
        arg5: jit_float32_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_wwd(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_word_t,
        arg4: jit_word_t,
        arg5: jit_float64_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_pww(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_pointer_t,
        arg4: jit_word_t,
        arg5: jit_word_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_pwf(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_pointer_t,
        arg4: jit_word_t,
        arg5: jit_float32_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_new_node_pwd(
        arg1: *mut jit_state_t,
        arg2: jit_code_t,
        arg3: jit_pointer_t,
        arg4: jit_word_t,
        arg5: jit_float64_t,
    ) -> *mut jit_node_t;
}
extern "C" {
    pub fn _jit_arg_register_p(arg1: *mut jit_state_t, arg2: *mut jit_node_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_callee_save_p(arg1: *mut jit_state_t, arg2: jit_int32_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_pointer_p(arg1: *mut jit_state_t, arg2: jit_pointer_t) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_get_note(
        arg1: *mut jit_state_t,
        arg2: jit_pointer_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_int,
    ) -> jit_bool_t;
}
extern "C" {
    pub fn _jit_disassemble(arg1: *mut jit_state_t);
}
extern "C" {
    pub fn jit_set_memory_functions(
        arg1: jit_alloc_func_ptr,
        arg2: jit_realloc_func_ptr,
        arg3: jit_free_func_ptr,
    );
}
extern "C" {
    pub fn jit_get_memory_functions(
        arg1: *mut jit_alloc_func_ptr,
        arg2: *mut jit_realloc_func_ptr,
        arg3: *mut jit_free_func_ptr,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
